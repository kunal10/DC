package dc;

import java.io.Serializable;
import java.util.Comparator;

/** Class to encapsulate the messages sent over the network. */
public class Message implements Comparable<Message>, Serializable {
  public Message(int src, int dest, long ts, int[] vc) {
    this(src, dest, ts, 0, vc);
  }
  
  public Message(int src, int dest, long ts, long delay, int[] vc) {
    super();
    this.src = src;
    this.dest = dest;
    this.ts = ts;
    this.delay = delay;
    this.vc = vc;
  }
  
  public Message(Message other) {
    this(other.getSrc(), other.getDest(), other.getTs(), other.getVc());
  } 
  
  @Override
  public int compareTo(Message o) {
    if (this.ts == o.getTs()) {
      return 0;
    } else if (this.ts < o.getTs()) {
      return -1;
    }
    return 1;
  }
  
  public String toString() {
    StringBuilder result = new StringBuilder();
    result.append("Src: p" + src);
    result.append("\nDest: p" + dest);
    result.append("\nSendTime: " + ts/1000 );
    result.append("\nVC:");
    for (int i = 0; i < vc.length; i++) {
      result.append("\t" + vc[i]);
    }
    return result.toString();
  }
  
  public boolean isServerMsg() {
    return (src == -1 && dest >= 0);
  }
  
  public boolean isClientMsg() {
    return (src > 0 && dest > 0); 
  }
  
  public boolean isClientServerMsg() {
    return (src > 0 && dest == -1);
  } 

  public boolean isValid() {
    return (isServerMsg() || isClientMsg() || isClientServerMsg());
  }
  
  public int getSrc() {
    return src;
  }

  public int getDest() {
    return dest;
  }
  
  public long getTs() {
    return ts;
  }
  
  public void setStartTime(long startTime) {
    this.startTime = startTime;
  }
  
  public long getStartTime() {
    return startTime;
  }
  
  public long getDelay() {
    return delay;
  }
  
  public int[] getVc() {
    return vc;
  }

  private int src;
  private int dest;
  /** Timestamp corresponding to the message. */
  private long ts;
  /** Used only by special message sent by server */
  private long startTime;
  /** 
   * Delay between source and destination. 
   * NOTE : This is supposed to be set by the server by reading the config.
   */
  private long delay;

  /**
   *  Vector Clock time stamp corresponding to this message.
   *  NOTE : We are assuming that we know the number of processes in the system.
   *  But this may change with time. If vc contains less entries than the 
   *  #processes then we can assume the rest to be 0.
   */
  private int[] vc;
  
  /** Serialized version generated by Eclipse */
  private static final long serialVersionUID = 1L;
  
  /**
   *   Used by server to send response messages according to sendTime + Delay.  
   */
  static class MessageDeliveryComparator implements Comparator<Message> {
    @Override
    public int compare (Message m1, Message m2) {
      long t1 = m1.getTs() + m1.getDelay();
      long t2 = m2.getTs() + m2.getDelay();
      if (t1 < t2) {
          return -1;
      } else if (t1 > t2) {
        return 1;
      }
      return 0;
    }
  }
}